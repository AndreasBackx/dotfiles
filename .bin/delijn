#!/usr/bin/env python

import sys
from datetime import datetime

import requests


class DeLijnClient:
    """De Lijn API client.

    See https://delijn.docs.apiary.io for De Lijn API docs.

    Attributes:
        BASE_URL: The base URL of the API.
    """

    BASE_URL = 'https://www.delijn.be/rise-api-core'

    def request(self, path, method='GET', **kwargs):
        try:
            return requests.request(
                url=f'{DeLijnClient.BASE_URL}{path}',
                method=method,
                **kwargs
            ).json()
        except Exception:
            return None

    def departures(self, halte_id, results_amount=5):
        response = self.request(
            path=f'/haltes/vertrekken/{halte_id}/{results_amount}'
        )

        if not response:
            return None

        return response

    def departures_to(self, to, **kwargs):
        departures = self.departures(**kwargs)

        if departures is None:
            raise StopIteration

        lines = departures['lijnen']
        for line in lines:
            if line['bestemming'] == to:
                yield line

        raise StopIteration


# Gent Van Nassaustraat
halte_id = 200030

client = DeLijnClient()
departures = list(
    client.departures_to(
        to='Flanders Expo',
        halte_id=halte_id
    )
)

if not departures:
    sys.exit()

first_departure = departures[0]
departure_epoch = first_departure['vertrekCalendar'] / 1000
departure_time = datetime.fromtimestamp(departure_epoch)
departure_formatted = departure_time.strftime('%H:%M')

print(departure_formatted)
