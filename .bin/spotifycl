#!/usr/bin/env python

import os
import time
import traceback

import click
import dbus
import dbus.mainloop.glib
import spotipy
import spotipy.util as util
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
from spotipy.oauth2 import SpotifyClientCredentials

inactive_color = '%{F#6E6E6E}'
active_color = '%{F#CECECE}'
default_color = '%{F-}'


class Spotify:

    SPOTIFY_BUS = 'org.mpris.MediaPlayer2.spotify'
    SPOTIFY_OBJECT_PATH = '/org/mpris/MediaPlayer2'

    PLAYER_INTERFACE = 'org.mpris.MediaPlayer2.Player'
    PROPERTIES_INTERFACE = 'org.freedesktop.DBus.Properties'

    def __init__(self):
        DBusGMainLoop(set_as_default=True)
        self.session_bus = dbus.SessionBus()
        self.last_output = ''
        self.empty_output = True

        # Last shown metadata
        self.last_title = None
        # Whether the current song is added to the library
        self.saved_track = False

        self.setup_spotipy()

    def monitor(self):
        self.setup_properties_changed()
        self.freedesktop = self.session_bus.get_object(
            "org.freedesktop.DBus",
            "/org/freedesktop/DBus"
        )
        self.freedesktop.connect_to_signal(
            "NameOwnerChanged",
            self.on_name_owner_changed,
            arg0="org.mpris.MediaPlayer2.spotify"
        )

        loop = GLib.MainLoop()
        loop.run()

    @property
    def metadata_status(self):
        spotify_properties = dbus.Interface(
            self.spotify,
            dbus_interface=Spotify.PROPERTIES_INTERFACE
        )
        metadata = spotify_properties.Get(
            Spotify.PLAYER_INTERFACE,
            'Metadata'
        )
        playback_status = spotify_properties.Get(
            Spotify.PLAYER_INTERFACE,
            'PlaybackStatus'
        )
        return metadata, playback_status

    def setup_spotipy(self):
        auth = util.prompt_for_user_token(
            username=os.environ.get('SPOTIFY_USERNAME'),
            scope='user-library-read,user-library-modify'
        )
        self.spotipy = spotipy.Spotify(auth=auth)

    def save(self):
        try:
            self.setup_spotify()
            metadata, playback_status = self.metadata_status
            trackid = metadata['mpris:trackid']
            self.output(trackid)

            # self.output(sp.current_user())
            self.spotipy.current_user_saved_tracks_add(tracks=[trackid])
            self.output('Saved to library!')
            time.sleep(1)
            self.output_playback_status(
                data={
                    'Metadata': metadata,
                    'PlaybackStatus': playback_status,
                }
            )

        except dbus.DBusException:
            self.output('Could not connect to spotify.')

    def output(self, line):
        if not line:
            self.empty_output = True
        if line != self.last_output:
            print(line, flush=True)
            self.last_output = line

    def setup_spotify(self):
        self.spotify = self.session_bus.get_object(
            Spotify.SPOTIFY_BUS,
            Spotify.SPOTIFY_OBJECT_PATH
        )

    def setup_properties_changed(self):
        try:
            self.setup_spotify()
            self.spotify.connect_to_signal(
                'PropertiesChanged',
                self.on_properties_changed
            )

            if self.empty_output:
                metadata, playback_status = self.metadata_status
                self.output_playback_status(
                    data={
                        'Metadata': metadata,
                        'PlaybackStatus': playback_status,
                    }
                )

        except dbus.DBusException:
            self.output('')

    def output_playback_status(self, data):
        metadata = data['Metadata']
        artists = metadata['xesam:artist']
        artist = artists[0] if artists else None

        if not artist:
            self.output('')
            return

        title = metadata['xesam:title']
        playback_status = data['PlaybackStatus']
        same_song = title == self.last_title

        color = active_color if playback_status == 'Playing' else inactive_color
        divider = '+' if same_song and self.saved_track else '-'
        self.output(f'{color}{artist} {divider} {title}{default_color}')

        if not same_song:
            self.last_title = title
            trackid = metadata['mpris:trackid']
            self.saved_track = self.spotipy.current_user_saved_tracks_contains(tracks=[trackid])[0]
            if self.saved_track:
                divider = '+'
                self.output(f'{color}{artist} {divider} {title}{default_color}')

    def on_properties_changed(self, interface, data, *args, **kwargs):
        self.output_playback_status(data)

    def on_name_owner_changed(self, name, old_owner, new_owner):
        if name == 'org.mpris.MediaPlayer2.spotify':
            if new_owner:
                # Spotify was opened.
                self.setup_properties_changed()
            else:
                # Spotify was closed.
                self.spotify = None
                self.output('')


@click.group()
def cli():
    """Script for listening to Spotify over dbus and adding tracks to your library."""
    pass


@cli.command()
def status():
    """Follow the status of the currently playing song on Spotify."""
    spotify = Spotify()
    spotify.monitor()


@cli.command()
def save():
    """Save the currently playing song to your library."""
    spotify = Spotify()
    spotify.save()


if __name__ == '__main__':
    cli()
