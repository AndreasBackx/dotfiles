#!/usr/bin/env python

import traceback
from gi.repository import GLib
import dbus
import dbus.mainloop.glib
import time
from dbus.mainloop.glib import DBusGMainLoop

inactive_color = '%{F#6E6E6E}'
active_color = '%{F#CECECE}'
default_color = '%{F-}'


class SpotifyStatus:

    SPOTIFY_BUS = 'org.mpris.MediaPlayer2.spotify'
    SPOTIFY_OBJECT_PATH = '/org/mpris/MediaPlayer2'

    PLAYER_INTERFACE = 'org.mpris.MediaPlayer2.Player'
    PROPERTIES_INTERFACE = 'org.freedesktop.DBus.Properties'

    def __init__(self):
        DBusGMainLoop(set_as_default=True)
        self.session_bus = dbus.SessionBus()
        self.last_output = ''
        self.empty_output = True

        self.setup_properties_changed()

        self.freedesktop = self.session_bus.get_object(
            "org.freedesktop.DBus",
            "/org/freedesktop/DBus"
        )
        self.freedesktop.connect_to_signal(
            "NameOwnerChanged",
            self.on_name_owner_changed,
            arg0="org.mpris.MediaPlayer2.spotify"
        )

        loop = GLib.MainLoop()
        loop.run()

    def output(self, line):
        if not line:
            self.empty_output = True
        if line != self.last_output:
            print(line, flush=True)
            self.last_output = line

    def setup_properties_changed(self):
        try:
            self.spotify = self.session_bus.get_object(
                SpotifyStatus.SPOTIFY_BUS,
                SpotifyStatus.SPOTIFY_OBJECT_PATH
            )
            self.spotify.connect_to_signal(
                'PropertiesChanged',
                self.on_properties_changed
            )

            if self.empty_output:
                spotify_properties = dbus.Interface(
                    self.spotify,
                    dbus_interface=SpotifyStatus.PROPERTIES_INTERFACE
                )
                metadata = spotify_properties.Get(
                    SpotifyStatus.PLAYER_INTERFACE,
                    'Metadata'
                )
                playback_status = spotify_properties.Get(
                    SpotifyStatus.PLAYER_INTERFACE,
                    'PlaybackStatus'
                )
                self.output_playback_status(
                    data={
                        'Metadata': metadata,
                        'PlaybackStatus': playback_status,
                    }
                )

        except dbus.DBusException:
            self.output('')

    def output_playback_status(self, data):
        metadata = data['Metadata']
        artists = metadata['xesam:artist']
        artist = artists[0] if artists else None

        if not artist:
            self.output('')
            return

        title = metadata['xesam:title']
        playback_status = data['PlaybackStatus']

        color = active_color if playback_status == 'Playing' else inactive_color
        self.output(f'{color}{artist} - {title}{default_color}')

    def on_properties_changed(self, interface, data, *args, **kwargs):
        self.output_playback_status(data)

    def on_name_owner_changed(self, name, old_owner, new_owner):
        if name == 'org.mpris.MediaPlayer2.spotify':
            if new_owner:
                # Spotify was opened.
                self.setup_properties_changed()
            else:
                # Spotify was closed.
                self.spotify = None
                self.output('')


if __name__ == '__main__':
    SpotifyStatus()
