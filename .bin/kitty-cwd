#!/usr/bin/env python

# MIT License
#
# Copyright (c) 2018 Andreas Backx
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import json
import subprocess
import sys
from os import path

KITTY_SOCKET = "/tmp/kitty"


def get_cwd():
    try:
        kitty_windows = subprocess.check_output(
            [
                "kitty",
                "@",
                "--to",
                f"unix:{KITTY_SOCKET}",
                "ls",
            ]
        )
    except subprocess.CalledProcessError:
        return None
    windows = json.loads(kitty_windows)

    for window in windows:
        if not window["is_focused"]:
            continue

        for tab in window["tabs"]:
            if not tab["is_focused"]:
                continue

            for tab_window in tab["windows"]:
                if not tab_window["is_focused"]:
                    continue

                for foreground_process in tab_window["foreground_processes"]:
                    if "cwd" in foreground_process:
                        return foreground_process["cwd"]


def is_running():
    exists = path.exists(KITTY_SOCKET)
    return exists


directory = "."
if is_running():
    cwd = get_cwd()
    if cwd is not None:
        directory = cwd

try:
    subprocess.run(
        [
            "kitty",
            "--single-instance",
            "--listen-on",
            f"unix:{KITTY_SOCKET}",
            "--directory",
            directory,
            *sys.argv[1:],
        ]
    )
except Exception:
    subprocess.run(["kitty", *sys.argv[1:]])
