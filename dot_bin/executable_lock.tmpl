#!/usr/bin/env zsh

set -e

source /usr/bin/env_parallel.zsh

extension="ppm"

file_location_left=/tmp/lockscreen_left.$extension
file_location_center=/tmp/lockscreen_center.$extension
file_location_right=/tmp/lockscreen_right.$extension

local spotify_status
local is_muted=false

function before_lock() {
    spotify_status=$(spotifycl status)
    spotifycl pause

    volume_response=$(wpctl get-volume @DEFAULT_AUDIO_SINK@)
    [[ "$volume_response" =~ "MUTED" ]] && is_muted=true

    if [[ "$is_muted" == "false" ]]; then
        echo "Muting"
        wpctl set-mute @DEFAULT_AUDIO_SINK@ 1
    fi

    # Pause notifications
    makoctl set-mode dnd
}

function after_unlock() {
    # Resume notifications
    makoctl set-mode default &

    if [[ "$spotify_status" == "playing" ]]; then
        spotifycl play &
    fi

    if [[ "$is_muted" == "false" ]]; then
        echo "Unmuting"
        wpctl set-mute @DEFAULT_AUDIO_SINK@ 0 &
    fi

    parallel --link rm {} ::: $file_location_left $file_location_center $file_location_right

}

before_lock &

outputs=$(hyprctl monitors -j || swaymsg -t get_outputs)
time parset "monitor_left monitor_center monitor_right" ::: \
    'source ~/.bin/utils.zsh; get-output-name "{{ index .monitors .monitors.selected "left" "name" }}" "$outputs"' \
    'source ~/.bin/utils.zsh; get-output-name "{{ index .monitors .monitors.selected "center" "name" }}" "$outputs"' \
    'source ~/.bin/utils.zsh; get-output-name "{{ index .monitors .monitors.selected "right" "name" }}" "$outputs"'

time parallel --link -X "grim -t $extension -o {1} - | convert - -encoding $extension -scale 10% -scale 1000% {2}" ::: $monitor_left $monitor_center $monitor_right ::: $file_location_left $file_location_center $file_location_right

swaylock \
    --image "$monitor_left:$file_location_left" \
    --image "$monitor_center:$file_location_center" \
    --image "$monitor_right:$file_location_right" \
    --font="Roboto Regular" \
    --scaling fill

after_unlock &
